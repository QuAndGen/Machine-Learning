
cluster=[i for i in range(1,12)] # Number of cluster, In this example we hvae 12 clusters
variance=[100.0,53.0,31.0,28.0,26.0,24.0,21.0,20.0,19.0,16.0,16.0] # sum of square in each cluster

entropy=list(map(lambda x:round(x/variance[0],2),variance)) # variance/first cluster variance
Delta_1=[round(entropy[i-1]-entropy[i],2) for i in range(1,len(entropy))] #difference of entropy

Delta_2=[0,0]+[round(Delta_1[i-1]-Delta_1[i],2) for i in range(1,len(Delta_1))] #difference of Delta

Delta_1=[0]+Delta_1 

Strength=[i-j if (i-j)>0 else 0 for i,j in zip(Delta_2,Delta_1)][1:]+[0] # calculate strength

rel_Strength=[round(i/(1.0*j),2)  for i,j in zip(Strength,cluster)] # relative strength



import matplotlib.pyplot as plt


fig, ax1 = plt.subplots()

color = 'tab:red'
ax1.set_xlabel('Cluster')
ax1.set_ylabel('Variance', color=color)
ax1.plot(cluster, entropy, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Strength', color=color)  # we already handled the x-label with ax1
ax2.bar(cluster, rel_Strength, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()


#Now we can see at cluster 3, the variance is low and strength is very high , 
# hence optimal cluster will be 3
